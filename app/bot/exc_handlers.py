from aiogram import Dispatcher, types

import configs
import interfaces.exc.entity as entity_exc
from bot.logger import logger


def add_handlers(dp: Dispatcher):
    dp.register_errors_handler(entity_not_exist, exception=entity_exc.EntityNotExist)
    dp.register_errors_handler(entity_already_exist, exception=entity_exc.EntityAlreadyExist)
    # dp.register_errors_handler(unexpected_error, exception=Exception)


async def entity_already_exist(update: types.Update, exc: entity_exc.EntityAlreadyExist):
    message = update.message or update.callback_query.message
    chat_id = message.chat.id
    await update.bot.send_message(
        chat_id=chat_id,
        text='<i>üòø –£–ø—Å, —Å—É—â–Ω–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>',
    )
    return True


async def entity_not_exist(update: types.Update, exc: entity_exc.EntityNotExist):
    message = update.message or update.callback_query.message
    chat_id = message.chat.id
    await update.bot.send_message(
        chat_id=chat_id,
        text='<i>üòø –£–ø—Å, —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>',
    )
    return True


async def unexpected_error(update: types.Update, exc: Exception):  # TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—Å—å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Exception
    message = update.message or update.callback_query.message
    chat_id = message.chat.id
    user = message.from_user.username or message.chat.id
    logger().error(f'User {user} . UNEXPECTED ERROR: {exc}')
    await update.bot.send_message(
        chat_id=chat_id,
        text='<i>üòø –£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.</i>\n'
             f'–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É (@{configs.SUPPORT_USERNAME}).'
    )
